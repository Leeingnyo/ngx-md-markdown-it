{"version":3,"sources":["ng://ngx-md/lib/ngx-md.service.ts","ng://ngx-md/lib/ngx-md.component.ts","ng://ngx-md/lib/ngx-md.config.ts","ng://ngx-md/lib/ngx-md.module.ts"],"names":["NgxMdService","_http","this","MarkdownIt","linkify","use","MarkdownItFootnote","defaultRender","_renderer","renderer","rules","link_open","tokens","idx","options","env","self","renderToken","aIndex","attrIndex","attrPush","attrs","setMarkedOptions","prototype","getContent","path","get","responseType","pipe","map","res","catchError","handleError","Object","assign","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","compile","data","render","error","errMsg","fetch","body","json","err","JSON","stringify","status","statusText","message","toString","throwError","Injectable","args","providedIn","HttpClient","NgxMdComponent","_mdService","_el","platformId","defineProperty","value","_path","onPathChange","_data","onDataChange","nativeElement","innerHTML","highlightContent","ngAfterViewInit","processRaw","_md","prepare","decodeHtml","html","txt","document","createElement","_this","_ext","split","splice","join","subscribe","console","Promise","reject","raw","isCodeBlock_1","line","trimLeft","substring","trim","replace","async","isPlatformBrowser","Prism.highlightAll","Component","selector","template","styles","ElementRef","Inject","PLATFORM_ID","Input","NgxMdConfig","NgxMdModule","forRoot","ngModule","providers","NgModule","imports","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core'\nimport { HttpClient } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs'\nimport { map, catchError } from 'rxjs/operators';\nimport MarkdownIt from 'markdown-it';\nimport MarkdownItFootnote from 'markdown-it-footnote';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMdService {\n  private _renderer: any = MarkdownIt({ linkify: true }).use(MarkdownItFootnote);\n\n  constructor(private _http: HttpClient) {\n    // Remember old renderer, if overriden, or proxy to default renderer\n    const defaultRender = this._renderer.renderer.rules.link_open || function(tokens, idx, options, env, self) {\n      return self.renderToken(tokens, idx, options);\n    };\n    this._renderer.renderer.rules.link_open = function (tokens, idx, options, env, self) {\n      const aIndex = tokens[idx].attrIndex('target');\n\n      if (aIndex < 0) {\n        tokens[idx].attrPush(['target', '_blank']);\n      } else {\n        tokens[idx].attrs[aIndex][1] = '_blank';\n      }\n\n      return defaultRender(tokens, idx, options, env, self);\n    };\n    this.setMarkedOptions({});\n  }\n\n  // get the content from remote resource\n  getContent(path: string): Observable<any> {\n      return this._http.get(path, {responseType: 'text'}).pipe(map(res => res), catchError(this.handleError));\n  }\n\n  public setMarkedOptions(options: any) {\n    options = Object.assign({\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: false,\n      smartLists: true,\n      smartypants: false\n    }, options);\n    // TODO\n  }\n\n  // comple markdown to html\n  public compile(data: string) {\n     return this._renderer.render(data);\n  }\n\n  // handle error\n  private handleError(error: any): any {\n    let errMsg: string;\n    if (error instanceof fetch) {\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    return throwError(errMsg);\n  }\n}\n","\nimport { Component, ElementRef, OnInit, AfterViewInit, Input, PLATFORM_ID, Inject } from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\n\n@Component({\n    selector: 'markdown,[Markdown],ngx-md,[NgxMd]',\n    template: '<ng-content></ng-content>',\n    styles: [\n        `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }`\n    ]\n})\nexport class NgxMdComponent implements  AfterViewInit {\n    private _path: string;\n    private _data: string;\n    private _md: any;\n    private _ext: string;\n    changeLog: string[] = [];\n\n    constructor(\n        private _mdService: NgxMdService,\n        private _el: ElementRef,\n        @Inject(PLATFORM_ID) private platformId: string\n    ) { }\n\n   \n\n    @Input()\n    set path(value: string) {\n      if (value) {\n        this._path = value;\n        this.onPathChange();\n      }\n    }\n\n    @Input()\n    set data(value: string) {\n      if (value) {\n        this._data = value;\n        this.onDataChange(value);\n      }\n    }\n\n\n    // on input\n    onDataChange(data: string) {\n      if (data) {\n        this._el.nativeElement.innerHTML = this._mdService.compile(data);\n      } else {\n        this._el.nativeElement.innerHTML = '';\n      }\n      this.highlightContent(false);\n    }\n\n    /**\n     *  After view init\n     */\n    ngAfterViewInit() {\n      if (this._path) {\n        this.onPathChange();\n      } else if (!this._data) {\n        this.processRaw();\n      }\n    }\n\n    processRaw() {\n      this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\n      this._el.nativeElement.innerHTML = this._mdService.compile(this._md);\n      this.highlightContent(false);\n    }\n\n    /**\n     * get remote conent;\n     */\n    onPathChange() {\n        this._ext = this._path && this._path.split('.').splice(-1).join();\n        this._mdService.getContent(this._path)\n            .subscribe(data => {\n                this._md = this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n                this._el.nativeElement.innerHTML = this._mdService.compile(this.prepare(this._md));\n                this.highlightContent(false);\n            },\n            err => this.handleError);\n    }\n\n    /**\n     * catch http error\n     */\n    private handleError(error: any): Promise<any> {\n        console.error('An error occurred', error); // for demo purposes only\n        return Promise.reject(error.message || error);\n    }\n\n    /**\n     * Prepare string\n     */\n     prepare(raw: string) {\n        if (!raw) {\n            return '';\n        }\n        if (this._ext === 'md' || !this.path) {\n            let isCodeBlock = false;\n            return raw.split('\\n').map((line: string) => {\n                if (this.trimLeft(line).substring(0, 3) === '```') {\n                    isCodeBlock = !isCodeBlock;\n                }\n                return isCodeBlock ? line : line.trim();\n            }).join('\\n');\n        }\n        return raw.replace(/\\\"/g, '\\'');\n    }\n\n    /**\n     * Trim left whitespace\n     */\n    private trimLeft(line: string) {\n        return line.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /**\n     * Use Prism to highlight code snippets only on the browser\n     */\n    private highlightContent(async: boolean): void {\n      if (isPlatformBrowser(this.platformId)) {\n        Prism.highlightAll(async);\n      }\n    }\n}\n\nfunction decodeHtml(html: string) { // https://stackoverflow.com/a/7394787/588521\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n}\n\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxMdConfig {\n  /** config modue */\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxMdService } from './ngx-md.service';\nimport { NgxMdConfig } from './ngx-md.config';\nimport { NgxMdComponent } from './ngx-md.component';\n\n@NgModule({\n  imports: [HttpClientModule],\n  declarations: [NgxMdComponent],\n  providers: [NgxMdService],\n  exports: [NgxMdComponent],\n})\nexport class NgxMdModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxMdModule,\n      providers: [NgxMdConfig]\n    };\n  }\n}\n"]}