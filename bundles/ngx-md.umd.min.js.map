{"version":3,"sources":["ng://ngx-md/lib/ngx-md.service.ts","ng://ngx-md/lib/ngx-md.component.ts","ng://ngx-md/lib/ngx-md.config.ts","ng://ngx-md/lib/ngx-md.module.ts"],"names":["NgxMdService","_http","_domSanitizer","this","MarkdownIt","linkify","html","use","MarkdownItFootnote","extendRenderer","setMarkedOptions","prototype","getContent","path","get","responseType","pipe","map","res","catchError","handleError","options","Object","assign","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","compile","data","_renderer","render","defaultRender","renderer","rules","link_open","tokens","idx","env","self","renderToken","aIndex","attrIndex","attrPush","attrs","currentPageLinkWithoutHash","location","origin","pathname","search","footnote_ref","slf","id","footnote_anchor_name","caption","footnote_caption","refid","meta","subId","footnote_anchor","error","errMsg","fetch","body","json","err","JSON","stringify","status","statusText","message","toString","throwError","Injectable","args","providedIn","HttpClient","DomSanitizer","NgxMdComponent","_mdService","_el","platformId","changeLog","errror","EventEmitter","loaded","sanitizeHtml","defineProperty","value","_path","onPathChange","_data","onDataChange","nativeElement","innerHTML","highlightContent","ngAfterViewInit","processRaw","_md","prepare","decodeHtml","txt","document","createElement","_this","_ext","split","splice","join","subscribe","emit","console","raw","replace","isCodeBlock_1","line","trimLeft","substring","trim","async","isPlatformBrowser","Prism.highlightAll","Component","selector","template","ElementRef","Inject","PLATFORM_ID","Input","NgxMdConfig","NgxMdModule","forRoot","ngModule","providers","NgModule","imports","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport MarkdownIt from 'markdown-it';\nimport MarkdownItFootnote from 'markdown-it-footnote';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMdService {\n  private _renderer: any = MarkdownIt({ linkify: true, html: true }).use(MarkdownItFootnote);\n\n  constructor(\n    private _http: HttpClient,\n    private _domSanitizer: DomSanitizer\n  ) {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  // get the content from remote resource\n  getContent(path: string): Observable<any> {\n    return this._http.get(path, {responseType: 'text'})\n    .pipe(\n      map(res => res),\n      catchError(this.handleError)\n    );\n  }\n\n  public setMarkedOptions(options: any) {\n    options = Object.assign({\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: false,\n      smartLists: true,\n      smartypants: false\n    }, options);\n    // TODO\n  }\n\n  // comple markdown to html\n  public compile(data: string) {\n     return this._renderer.render(data);\n  }\n\n  // extend marked render to support todo checkbox\n  private extendRenderer() {\n    // make target of anchor tag blank\n    // Remember old renderer, if overriden, or proxy to default renderer\n    const defaultRender = this._renderer.renderer.rules.link_open || function(tokens, idx, options, env, self) {\n      return self.renderToken(tokens, idx, options);\n    };\n    this._renderer.renderer.rules.link_open = function (tokens, idx, options, env, self) {\n      const aIndex = tokens[idx].attrIndex('target');\n\n      if (aIndex < 0) {\n        tokens[idx].attrPush(['target', '_blank']);\n      } else {\n        tokens[idx].attrs[aIndex][1] = '_blank';\n      }\n\n      return defaultRender(tokens, idx, options, env, self);\n    };\n\n    // for angular routeer, add prefix location.href without fragment\n    const currentPageLinkWithoutHash = location.origin + location.pathname + location.search;\n    this._renderer.renderer.rules.footnote_ref = function render_footnote_ref(tokens, idx, options, env, slf) {\n      var id      = slf.rules.footnote_anchor_name(tokens, idx, options, env, slf);\n      var caption = slf.rules.footnote_caption(tokens, idx, options, env, slf);\n      var refid   = id;\n\n      if (tokens[idx].meta.subId > 0) {\n        refid += ':' + tokens[idx].meta.subId;\n      }\n\n      return '<sup class=\"footnote-ref\"><a href=\"' + currentPageLinkWithoutHash + '#fn' + id + '\" id=\"fnref' + refid + '\">' + caption + '</a></sup>';\n    }\n    this._renderer.renderer.rules.footnote_anchor = function render_footnote_anchor(tokens, idx, options, env, slf) {\n      var id = slf.rules.footnote_anchor_name(tokens, idx, options, env, slf);\n\n      if (tokens[idx].meta.subId > 0) {\n        id += ':' + tokens[idx].meta.subId;\n      }\n\n      /* â© with escape code to prevent display as Apple Emoji on iOS */\n      return ' <a href=\"' + currentPageLinkWithoutHash + '#fnref' + id + '\" class=\"footnote-backref\">\\u21a9\\uFE0E</a>';\n    }\n  }\n\n  // handle error\n  private handleError(error: any): any {\n    let errMsg: string;\n    if (error instanceof fetch) {\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    return throwError(errMsg);\n  }\n}\n\n","\nimport { Component, ElementRef, OnInit, AfterViewInit, Input, PLATFORM_ID, Inject, EventEmitter } from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\nimport { Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Component({\n    selector: 'markdown,[Markdown],ngx-md,[NgxMd]',\n    template: '<ng-content></ng-content>',\n    styles: [\n        `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }\n        .md-checkbox{\n            vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px;\n        }`\n    ]\n})\nexport class NgxMdComponent implements  AfterViewInit {\n    _path: string;\n    _data: string;\n    _md: any;\n    _ext: string;\n    changeLog: string[] = [];\n    errror: EventEmitter<any>  = new EventEmitter<any>();\n    loaded: EventEmitter<any>  = new EventEmitter<any>();\n\n    constructor(\n        public _mdService: NgxMdService,\n        public _el: ElementRef,\n        @Inject(PLATFORM_ID) public platformId: string\n    ) { }\n\n    @Input()\n    set path(value: string) {\n      if (value) {\n        this._path = value;\n        this.onPathChange();\n      }\n    }\n\n    @Input()\n    set data(value: string) {\n      if (value) {\n        this._data = value;\n        this.onDataChange(value);\n      }\n    }\n\n\n    /**\n     * Boolean indicating if the markdown content should be sanitized to avoid script injections\n     */\n    @Input() public sanitizeHtml = true;\n\n\n    // on input\n    onDataChange(data: string) {\n      if (data) {\n        this._el.nativeElement.innerHTML = this._mdService.compile(data);\n      } else {\n        this._el.nativeElement.innerHTML = '';\n      }\n      this.highlightContent(false);\n    }\n\n    /**\n     *  After view init\n     */\n    ngAfterViewInit() {\n      if (this._path) {\n        this.onPathChange();\n      } else if (!this._data) {\n        this.processRaw();\n      }\n    }\n\n    processRaw() {\n      this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\n      this._el.nativeElement.innerHTML = this._mdService.compile(this._md);\n      this.highlightContent(false);\n    }\n\n    /**\n     * get remote conent;\n     */\n    onPathChange() {\n        this._ext = this._path && this._path.split('.').splice(-1).join();\n        this._mdService.getContent(this._path).pipe(catchError(this.handleError))\n            .subscribe(data => {\n                this.loaded.emit(data);\n                this._md = this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n                this._el.nativeElement.innerHTML = this._mdService.compile(this.prepare(this._md));\n                this.highlightContent(false);\n            });\n    }\n\n    /**\n     * catch http error\n     */\n    private handleError(error: any): Subscribable<any> {\n        this.errror.emit(error);\n        console.error('An error occurred', error); // for demo purposes only\n        return error.message || error;\n    }\n\n    /**\n     * Prepare string\n     */\n     prepare(raw: string) {\n        if (!raw) {\n            return '';\n        }\n        if (this._ext === 'md' || !this.path) {\n            let isCodeBlock = false;\n            return raw.split('\\n').map((line: string) => {\n                // If the first non-blank chars are an opening/closing code block, toggle the flag\n                if (this.trimLeft(line).substring(0, 3) === '```') {\n                    isCodeBlock = !isCodeBlock;\n                }\n                return isCodeBlock ? line : line.trim();\n            }).join('\\n');\n        }\n        return raw.replace(/\\\"/g, '\\'');\n    }\n\n    /**\n     * Trim left whitespace\n     */\n    private trimLeft(line: string) {\n        return line.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /**\n     * Use Prism to highlight code snippets only on the browser\n     */\n    private highlightContent(async: boolean): void {\n      if (isPlatformBrowser(this.platformId)) {\n        Prism.highlightAll(async);\n      }\n    }\n}\n\nfunction decodeHtml(html: string) { // https://stackoverflow.com/a/7394787/588521\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n}\n\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxMdConfig {\n  /** config modue */\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxMdService } from './ngx-md.service';\nimport { NgxMdConfig } from './ngx-md.config';\nimport { NgxMdComponent } from './ngx-md.component';\n\n@NgModule({\n  imports: [HttpClientModule],\n  declarations: [NgxMdComponent],\n  providers: [NgxMdService],\n  exports: [NgxMdComponent],\n})\nexport class NgxMdModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxMdModule,\n      providers: [NgxMdConfig]\n    };\n  }\n}\n"]}